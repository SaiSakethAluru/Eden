# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.8
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_EMusicPlayer', [dirname(__file__)])
        except ImportError:
            import _EMusicPlayer
            return _EMusicPlayer
        if fp is not None:
            try:
                _mod = imp.load_module('_EMusicPlayer', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _EMusicPlayer = swig_import_helper()
    del swig_import_helper
else:
    import _EMusicPlayer
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def to_al_format(channels, samples):
    return _EMusicPlayer.to_al_format(channels, samples)
to_al_format = _EMusicPlayer.to_al_format

def list_audio_devices(devs, devices, number):
    return _EMusicPlayer.list_audio_devices(devs, devices, number)
list_audio_devices = _EMusicPlayer.list_audio_devices
class EMusicPlayer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, EMusicPlayer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, EMusicPlayer, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pause_state"] = _EMusicPlayer.EMusicPlayer_pause_state_set
    __swig_getmethods__["pause_state"] = _EMusicPlayer.EMusicPlayer_pause_state_get
    if _newclass:
        pause_state = _swig_property(_EMusicPlayer.EMusicPlayer_pause_state_get, _EMusicPlayer.EMusicPlayer_pause_state_set)
    __swig_setmethods__["stop_state"] = _EMusicPlayer.EMusicPlayer_stop_state_set
    __swig_getmethods__["stop_state"] = _EMusicPlayer.EMusicPlayer_stop_state_get
    if _newclass:
        stop_state = _swig_property(_EMusicPlayer.EMusicPlayer_stop_state_get, _EMusicPlayer.EMusicPlayer_stop_state_set)
    __swig_setmethods__["dev_num"] = _EMusicPlayer.EMusicPlayer_dev_num_set
    __swig_getmethods__["dev_num"] = _EMusicPlayer.EMusicPlayer_dev_num_get
    if _newclass:
        dev_num = _swig_property(_EMusicPlayer.EMusicPlayer_dev_num_get, _EMusicPlayer.EMusicPlayer_dev_num_set)
    __swig_setmethods__["current_device"] = _EMusicPlayer.EMusicPlayer_current_device_set
    __swig_getmethods__["current_device"] = _EMusicPlayer.EMusicPlayer_current_device_get
    if _newclass:
        current_device = _swig_property(_EMusicPlayer.EMusicPlayer_current_device_get, _EMusicPlayer.EMusicPlayer_current_device_set)
    __swig_setmethods__["use_default"] = _EMusicPlayer.EMusicPlayer_use_default_set
    __swig_getmethods__["use_default"] = _EMusicPlayer.EMusicPlayer_use_default_get
    if _newclass:
        use_default = _swig_property(_EMusicPlayer.EMusicPlayer_use_default_get, _EMusicPlayer.EMusicPlayer_use_default_set)

    def __init__(self):
        this = _EMusicPlayer.new_EMusicPlayer()
        try:
            self.this.append(this)
        except Exception:
            self.this = this
    __swig_destroy__ = _EMusicPlayer.delete_EMusicPlayer
    __del__ = lambda self: None

    def device_reset(self, name):
        return _EMusicPlayer.EMusicPlayer_device_reset(self, name)

    def dev_check(self):
        return _EMusicPlayer.EMusicPlayer_dev_check(self)

    def update_device_list(self):
        return _EMusicPlayer.EMusicPlayer_update_device_list(self)

    def get_device_name(self, index):
        return _EMusicPlayer.EMusicPlayer_get_device_name(self, index)

    def set_device(self, new_device_name):
        return _EMusicPlayer.EMusicPlayer_set_device(self, new_device_name)

    def load(self, path):
        return _EMusicPlayer.EMusicPlayer_load(self, path)

    def set_volume(self, newVolume):
        return _EMusicPlayer.EMusicPlayer_set_volume(self, newVolume)

    def play(self):
        return _EMusicPlayer.EMusicPlayer_play(self)

    def pause(self):
        return _EMusicPlayer.EMusicPlayer_pause(self)

    def unpause(self):
        return _EMusicPlayer.EMusicPlayer_unpause(self)

    def stop(self):
        return _EMusicPlayer.EMusicPlayer_stop(self)
EMusicPlayer_swigregister = _EMusicPlayer.EMusicPlayer_swigregister
EMusicPlayer_swigregister(EMusicPlayer)

# This file is compatible with both classic and new-style classes.


